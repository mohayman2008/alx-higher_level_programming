#!/usr/bin/python3
"""Solve the N queens puzzle (Using backtracking)
"""


def main():
    from sys import argv

    if len(argv) != 2:
        print("Usage: nqueens N")
        exit(1)

    try:
        n = int(argv[1])
    except Exception:
        print("N must be a number")
        exit(1)

    if n < 4:
        print("N must be at least 4")
        exit(1)

    b = QueensChessBoard(n)
    b.solve()
    b.print_solutions()


class QueensChessBoard:
    """Rectangle class
    """

    def __init__(self, size=0):
        """Initializes the board"""
        self.size = size
        self.board = [[0 for y in range(self.size)] for x in range(self.size)]
        self.solutions = []
        pass

    @property
    def size(self):
        """Returns size"""
        return self.__size

    @size.setter
    def size(self, size):
        """Sets size"""
        self.__size = size
        pass

    @staticmethod
    def diag_origin(x, y):
        """Return the start of the diagonal containing cell (x, y)"""
        minimum = min(x, y)
        return (x - minimum, y - minimum)

    @staticmethod
    def rev_diag_origin(size, x, y):
        """Return the start of the normal diagonal containing cell (x, y)"""
        sum_xy = x + y
        y = min(size - 1, sum_xy)
        x = sum_xy - y
        return (x, y)

    def check_safety(self, x, y):
        """Checks if a board cell is not under attack"""
        for i in range(self.size):
            if self.board[i][y]:
                return False
        for j in range(self.size):
            if self.board[x][j]:
                return False
        i, j = self.diag_origin(x, y)
        while i < self.size and j < self.size:
            if self.board[i][j]:
                return False
            i += 1
            j += 1

        i, j = self.rev_diag_origin(self.size, x, y)
        while i < self.size and j >= 0:
            if self.board[i][j]:
                return False
            i += 1
            j -= 1
        return True

    def get_queens(self):
        """Generate a list of queen locations on board"""
        queens = []
        for x in range(self.size):
            for y in range(self.size):
                if self.board[x][y]:
                    queens.append([x, y])
        return queens

    def print_solutions(self):
        """Print the solutions generated by self.solve()"""
        for sol in self.solutions:
            print(sol)
        pass

    def solve(self, x0=0, n=0):
        """Find solutions for the N-Queens problem"""
        if n == self.size:
            return
        for x in range(x0, self.size):
            for y in range(self.size):
                if (self.check_safety(x, y)):
                    self.board[x][y] = 1
                    n += 1
                    if n == self.size:
                        self.solutions.append(self.get_queens())
                    self.solve(x + 1, n)
                    self.board[x][y] = 0
                    n -= 1
            return

    def __str__(self):
        """Return the board string representaion"""
        s = "["
        for row in self.board:
            s += row + ",\n"
        s = s[:-1] + "]"
        return s
    pass


if __name__ == "__main__":
    main()
